# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Robot {
  id: ID!
  title: String
  excerpt: String
  slug: String
  image: ImageFieldOutput
  published_at: DateTime
  content: Robot_content_Document
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  src: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type Robot_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input RobotWhereUniqueInput {
  id: ID
  excerpt: String
  slug: String
}

input RobotWhereInput {
  AND: [RobotWhereInput!]
  OR: [RobotWhereInput!]
  NOT: [RobotWhereInput!]
  id: IDFilter
  title: StringFilter
  excerpt: StringFilter
  slug: StringFilter
  published_at: DateTimeFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input RobotOrderByInput {
  id: OrderDirection
  title: OrderDirection
  excerpt: OrderDirection
  slug: OrderDirection
  published_at: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input RobotUpdateInput {
  title: String
  excerpt: String
  slug: String
  image: ImageFieldInput
  published_at: DateTime
  content: JSON
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input RobotUpdateArgs {
  where: RobotWhereUniqueInput!
  data: RobotUpdateInput!
}

input RobotCreateInput {
  title: String
  excerpt: String
  slug: String
  image: ImageFieldInput
  published_at: DateTime
  content: JSON
}

type Program {
  id: ID!
  title: String
  excerpt: String
  slug: String
  image: ImageFieldOutput
  published_at: DateTime
  content: Program_content_Document
}

type Program_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProgramWhereUniqueInput {
  id: ID
  excerpt: String
  slug: String
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  src: String!
}

input ProgramWhereInput {
  AND: [ProgramWhereInput!]
  OR: [ProgramWhereInput!]
  NOT: [ProgramWhereInput!]
  id: IDFilter
  title: StringFilter
  excerpt: StringFilter
  slug: StringFilter
  published_at: DateTimeFilter
}

input ProgramOrderByInput {
  id: OrderDirection
  title: OrderDirection
  excerpt: OrderDirection
  slug: OrderDirection
  published_at: OrderDirection
}

input ProgramUpdateInput {
  title: String
  excerpt: String
  slug: String
  image: ImageFieldInput
  published_at: DateTime
  content: JSON
}

input ProgramUpdateArgs {
  where: ProgramWhereUniqueInput!
  data: ProgramUpdateInput!
}

input ProgramCreateInput {
  title: String
  excerpt: String
  slug: String
  image: ImageFieldInput
  published_at: DateTime
  content: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createRobot(data: RobotCreateInput!): Robot
  createRobots(data: [RobotCreateInput!]!): [Robot]
  updateRobot(where: RobotWhereUniqueInput!, data: RobotUpdateInput!): Robot
  updateRobots(data: [RobotUpdateArgs!]!): [Robot]
  deleteRobot(where: RobotWhereUniqueInput!): Robot
  deleteRobots(where: [RobotWhereUniqueInput!]!): [Robot]
  createProgram(data: ProgramCreateInput!): Program
  createPrograms(data: [ProgramCreateInput!]!): [Program]
  updateProgram(
    where: ProgramWhereUniqueInput!
    data: ProgramUpdateInput!
  ): Program
  updatePrograms(data: [ProgramUpdateArgs!]!): [Program]
  deleteProgram(where: ProgramWhereUniqueInput!): Program
  deletePrograms(where: [ProgramWhereUniqueInput!]!): [Program]
}

type Query {
  robots(
    where: RobotWhereInput! = {}
    orderBy: [RobotOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Robot!]
  robot(where: RobotWhereUniqueInput!): Robot
  robotsCount(where: RobotWhereInput! = {}): Int
  programs(
    where: ProgramWhereInput! = {}
    orderBy: [ProgramOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Program!]
  program(where: ProgramWhereUniqueInput!): Program
  programsCount(where: ProgramWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
